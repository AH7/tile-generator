---
name: {{ name }}
label: {{ label }}
description: {{ description }}
icon_image: {{ base64(icon_file) }}
product_version: '{{ version }}'
metadata_version: '1.5'
rank: 1
serial: true

releases:
- file: {{ release.file }}
  name: {{ release.name }}
  version: {{ release.version }}

stemcell_criteria:
  os: {{ stemcell_criteria.os or 'ubuntu-trusty' }}
  requires_cpi: false
  version: {{ stemcell_criteria.version }}

property_blueprints:
{% for package in packages %}
#
# Standard properties for package {{ package.name }}
#
- name: {{ package.name }}_app_name
  type: string
  configurable: true
  default: {{ package.name }}
{% if 'cf-create-buildpack' in package.jobs %}
- name: {{ package.name }}_buildpack_order
  type: integer
  configurable: true
  default: 0
{% else %}
- name: {{ package.name }}_app_version
  type: string
  configurable: true
  default: {{ version }}
- name: {{ package.name }}_app_uri
  type: string
  configurable: true
  default: {{ package.uri or package.name }}
{% if 'cf-push' in package.jobs %}
- name: {{ package.name }}_start_command
  type: string
  configurable: false
  default: {{ package.start_command or '' }}
- name: {{ package.name }}_health_monitor
  type: boolean
  configurable: false
  default: {{ package.health_monitor or false }}
- name: {{ package.name }}_create_open_security_group
  type: boolean
  configurable: true
  default: {{ package.create_open_security_group or false }}
- name: {{ package.name }}_org_quota
  type: integer
  configurable: false
  constraints:
    min: 512
    max: 1024
  default: {{ package.org_quota or 1024 }}
- name: {{ package.name }}_memory
  type: integer
  configurable: false
  constraints:
    min: 256
    max: 1024
  default: {{ package.memory or 512 }}
- name: {{ package.name }}_persistence_store_type
  type: dropdown_select
  configurable: true
  options:
  - name: mysql
    label: Managed MySQL Service
    default: true
  - name: custom
    label: User specified Persistent Store
  - name: none
    label: None
{% if 'cf-create-service-broker' in package.jobs %}
{% if package.on_demand_service_plans %}
#
# Properties for on-demand service plans
#
- name: {{ package.name }}_on_demand_service_plans_collection
  type: collection
  configurable: true
  property_blueprints:
  - name: guid
    type: uuid
    optional: false
    unique: true
  - name: name
    type: string
    configurable: true
{% for field in package.on_demand_service_plans %}
  - name: {{ field.name }}
    type: {{ field.type }}
    configurable: {{ field.configurable }}
{% endfor %}
{% endif %}
{% endif %}
{% endif %}
{% if 'cf-create-service-broker' in package.jobs %}
- name: {{ package.name }}_enable_global_access_to_plans
  type: boolean
  configurable: true
  default: false
- name: {{ package.name }}_internal_service_names
  type: string
  configurable: false
  default: {{ package.internal_service_names }}
{% if 'cf-push' not in package.jobs %}
- name: {{ package.name }}_broker_user
  type: string
  configurable: true
- name: {{ package.name }}_broker_password
  type: secret
  configurable: true
{% endif %}
{% endif %}
{% endif %}
{% endfor %}
#
# Non-configurable properties from the tile.yml file
#
{% for property in properties %}
- name: {{ property.name }} # Refer to this elsewhere as (( .property.{{ property.name }} ))
  type: {{ property.type }}
  {% if property.default is defined %}
  default: {{ property.default }}
  {% endif %}
{% endfor %}
#
# Configurable properties from the forms in the tile.yml file
#
{% for form in forms %} {% for property in form.properties %}
- name: {{ property.name }} # Refer to this elsewhere as (( .property.{{ property.name }} ))
  type: {{ property.type }}
  {% if property.default is defined %}
  default: {{ property.default }}
  {% endif %}
  configurable: true
{% endfor %} {% endfor %}

form_types:
{% for package in packages %}
- name: {{ package.name }}
  label: {{ package.name | replace('_',' ') | title }}
  description: Configuration for {{ package.name | replace('_',' ') | title }}
  property_inputs:
{% if 'cf-create-buildpack' in package.jobs %}
  - reference: .properties.{{ package.name }}_app_name
    label: Buildpack Name
    description: 'Enter the name of the Buildpack'
  - reference: .properties.{{ package.name }}_buildpack_order
    label: Buildpack Order
    description: 'Enter order for the Buildpack'
{% elif 'cf-push' not in package.jobs and 'cf-create-service-broker' in package.jobs %}
  - reference: .properties.{{ package.name }}_app_name
    label: Service Broker Application Name
    description: 'Enter the name for the Service Broker App'
  - reference: .properties.{{ package.name }}_app_uri
    label: Service Broker Application URI
    description: 'Enter the uri/endpoint for the Service Broker app (on push to CF)'
{% elif 'cf-push' in package.jobs %}
  - reference: .properties.{{ package.name }}_app_name
    label: Application Name
    description: 'Enter the name for the App'
  - reference: .properties.{{ package.name }}_app_uri
    label: Application URI
    description: 'Enter the uri/endpoint for the App (on push to CF)'
  - reference: .properties.{{ package.name }}_create_open_security_group
    label: Open up Security Groups
    description: 'Open up security group on CF for App to access external endpoints'
{% if package.persistence_store %}
  - reference: .properties.{{ package.name }}_persistence_store_type
    label: Persistence using MySQL Service binding (default) or none
    description: "Select MySQL Service Binding or None for saving state"
{% endif %}
{% if package.on_demand_service_plans %}
- name: {{ package.name }}_on_demand_service_plans
  label: On-Demand Service Plans for {{ package.name | replace('_',' ') | title }}
  description: "An on-demand service plan lets Pivotal CF users create their own Service Plans from the Pivotal CF command line interface or developer console. Use this page to configure the service plan's settings."
  property_inputs:
  - reference: .properties.{{ package.name }}_on_demand_service_plans_collection
    label: On-Demand Service Plans
    property_inputs:
    - reference: name
      label: Plan Name
      description: "Name of Plan"
      slug: false
{% for field in package.on_demand_service_plans %}
    - reference: {{ field.name }}
      label: {{ field.name }}
      description: {{ field.descrp }}
      slug: false
{% endfor %}
{% endif %}
{% endif %}
{% endfor %}
{% for form in forms %}
- name: {{ form.name }}
  label: {{ form.label }}
  description: {{ form.description }}
  property_inputs:
  {% for property in form.properties %}
  - reference: .properties.{{ property.name }}
  	label: {{ property.label }}
  	description: {{ property.description }}
  {% endfor %}
{% endfor %}

job_types:
- name: compilation
  resource_label: compilation
  resource_definitions:
   - name: ram
     type: integer
     configurable: true
     default: 1024
   - name: ephemeral_disk
     type: integer
     configurable: true
     default: 1024
   - name: persistent_disk
     type: integer
     configurable: true
     default: 0
   - name: cpu
     type: integer
     configurable: true
     default: 2
  static_ip: 0
  dynamic_ip: 1
  max_in_flight: 1
  instance_definitions:
    - name: instances
      type: integer
      default: 1
{% for job in jobs %}
- name: {{ job.name }}
  resource_label: {{ job.name }}
  errand: true
  templates:
  - name: {{ job.name }}
    release: {{ release.name }}
  resource_definitions:
  - name: ram
    type: integer
    configurable: false
    default: 512
  - name: ephemeral_disk
    type: integer
    configurable: false
    default: 2048
  - name: persistent_disk
    type: integer
    configurable: false
    default: 0
  - name: cpu
    type: integer
    configurable: false
    default: 1
  static_ip: 0
  dynamic_ip: 1
  max_in_flight: 1
  instance_definitions:
  - name: instances
    type: integer
    configurable: false
    default: 1
  property_blueprints:
  - name: vm_credentials
    type: salted_credentials
    default:
      identity: vcap
  - name: app_credentials
    type: salted_credentials
  manifest: |
    domain: (( ..cf.cloud_controller.system_domain.value ))
    app_domains:
      - (( ..cf.cloud_controller.apps_domain.value ))
    ssl:
      skip_cert_verify: (( ..cf.ha_proxy.skip_cert_verify.value ))
    uaa:
      url: https://uaa.(( ..cf.cloud_controller.system_domain.value ))
      clients:
        {{ job.package.name }}:
          secret: test
    {{ job.package.name }}:
      app_name: (( .properties.{{ job.package.name }}_app_name.value ))
{% if 'cf-create-buildpack' in job.package.jobs  %}
      buildpack_order: (( .properties.{{ job.package.name }}_buildpack_order.value ))
{% else %}
      app_uri: (( .properties.{{ job.package.name }}_app_uri.value ))
{% if 'cf-push' in job.package.jobs  %}
      app_version: (( .properties.{{ job.package.name }}_app_version.value ))
      create_open_security_group: (( .properties.{{ job.package.name }}_create_open_security_group.value ))
      app_push:
        org_quota: (( .properties.{{ job.package.name }}_org_quota.value ))
        timeout: 180
        memory: (( .properties.{{ job.package.name }}_memory.value ))
      start_command: (( .properties.{{ job.package.name }}_start_command.value ))
      health_monitor: (( .properties.{{ job.package.name }}_health_monitor.value ))
      user: (( .{{ job.name }}.app_credentials.identity ))
      password: (( .{{ job.name }}.app_credentials.password ))
      persistence_store_type: (( .properties.{{ job.package.name }}_persistence_store_type.value ))
{% if job.package.on_demand_service_plans is defined %}
      on_demand_service_plans: (( .properties.{{ job.package.name }}_on_demand_service_plans_collection.value ))
{% endif %}
{% endif %}

      # Need to squelch Broker user & password if app is also a broker..
{% if 'cf-create-service-broker' in job.package.jobs %}
      internal_service_name: (( .properties.{{ job.package.name }}_internal_service_names.value ))
      enable_global_access_to_plans: (( .properties.{{ job.package.name }}_enable_global_access_to_plans.value ))
      broker:
{% if 'cf-push' not in job.package.jobs %}
        user: (( .properties.{{ job.package.name }}_broker_user.value ))
        password: (( .properties.{{ job.package.name }}_broker_password.value ))
{% else %}
        user: (( .{{ job.name }}.app_credentials.identity ))
        password: (( .{{ job.name }}.app_credentials.password ))
{% endif %}
{% endif %}
      ### CUSTOM_VARIABLE_MANIFEST_BEGIN_MARKER
      ### CUSTOM_VARIABLE_MANIFEST_END_MARKER



    cf:
      admin_user: (( ..cf.uaa.system_services_credentials.identity ))
      admin_password: (( ..cf.uaa.system_services_credentials.password ))

{% endif %}

{% endfor %}

post_deploy_errands:
{% for errand in post_deploy_errands %}
- name: {{ errand.name }}
{% endfor %}

pre_delete_errands:
{% for errand in pre_delete_errands %}
- name: {{ errand.name }}
{% endfor %}

update:
  canaries: 1
  canary_watch_time: 60000-240000
  max_in_flight: 1
  update_watch_time: 60000-240000

requires_product_versions:
- name: cf
  version: "~> 1.0"
provides_product_versions:
